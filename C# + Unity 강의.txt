			

			*****12월 7일*****

	객체 : 메모리 안에있는 사물(가상)
	클래스 : 객체를 이루고 있는 타입 = int는 정수로 이루어진 타입
	만들고 싶은 객체 설계 >> 설계도는 클래스로 제작 >> 클래스를 통해 객체 생성

	**Ex))
	우리가 만들고 싶은 것 : 검사(RPG)
	검사의 특징들 :
	HP 100
	MP 50
	ATK 80
	EXP 0
	스킬 : 베기, 내려찍기

	검사를 만들어내기 우한 설계도 (class)
	검사class
	{
		HP 100
		MP 50
		ATK 80
		EXP 0
		베기() 
		내려찍기()
	}

	사용자 1이 검사 클래스를 선택했습니다 !
	>> 검사 class 설계도를 기반으로 
	"검사" 라는 객체가 생성됨. 
	
	이런 형태이다
__________________________________________________________________________________________________________________________

	*****12월 9일*****
	클래스를 이루는 것들
	변수 : ( int ,float, char, string )
	그룹형 변수 : ( array, list, dictionary, queue
	연산자 : ( 산술, 증감, 관계, 대입, 논리, 비트 관련 연산 )
	조건문 : ( if, switch )
	반복문 : ( for, foreach, while )
	함수 : ( 함수, 함수 오버로딩, 델리게이트, 인터페이스 )
	클래스 : ( 클래스, SOLID 원칙, 상속 )

	using 키워드 (using System;) :
	using 뭔가를 사용하겠다 라고 선언하는 키워드 .
	System 이라는 것을 사용하겠다. 라는 뜻
	using 은 언제 쓰는 것인가?


	namespace 키워드 (namespace UnityLesson_Csharp_Program) :
	클래스 간의 멤버 이름 충돌을 방지함 .

	*Ex) 네임스페이스 정의
	만약에 UnityLesson_CSharp_Program2 라는 namespace 의 클래스 등 정보를 가져와 쓰고 싶다.
	>>> UnityLesson_CSharp_Program2 라고 스크립트 최 상단에 선언해줌.

	*Ex 2) 우선순위가 차순위인 함수 호출
	UnityEngine.Physics , Unity.Physics
	두가지 중 기본적으로는 unityEngine.Physics 가 우선순위
	두 네임스페이스 모두 Raycast() 라는 함수를 포함하고 있다 .
	But 나는 Unity.Physics.Raycast() 를 쓰고싶다 
	>> 일반적으로 Raycast() 를 호출하면 >> UnityEngine.Physics.Raycast() 가 호출됨.
	using Raycast = Unity.Physics.Raycast가 호출됨


	Program class (class Program) : 
	모든 프로젝트는 처음 실행파일(.exe)을 통해 실행될 때에
	main() 함수를 실행하며
	C#에서 main함수조차도 객체지향컨셉에 맞게 Program이라는 클래스 안에 선언되어있음 .


	static 키워드 : (static ~~~ main ~~)
	static (정적) 은 dynamic (동적) 의 반대 개념 키워드
	static 은 상황, 조건에 따라 메모리에 할당할 수 없는 성질
	dynamic 은 은 상황, 조건에 따라 메모리에 할당할 수 없는 성질
	main 함수는 static으로 정의되었으므로 하나만 존재할 수 있다 .
	만약 class에 static이 붙으면
	그에 딸린 모든 변수나 함수도 static 이어야 함.


	void 자료형 (~~void ~~) :
	void : 반환값이 없다.
	입력 >> 기능수행 >> 출력
	void 를 반환하는 함수는 : 입력(없을수도 있음) >> 기능수행 


	args (~~~~args):
	arguments 인자, 인수
	함수에서 받을 입력
	표기방법은 함수 이름 뒤에 괄호열고 " 자료형 " " 인자이름 " 형태로 써준다


	bit = 한자리 이진수 ( 0과 1, 정보처리의 최소단위 )
	1 Byte = 8 bit ( CPU 데이터 처리 최소단위 )
	4 Byte = 8 bit * 4 = 32 bit
	4 Byte로 표현할 수 있는 숫자의 범위 >> 2^32

	int // 정수형 , 4 Byte - 2147483648~2147483647
	float // 실수형 . 4 byte
	bool // 논리형 ( 참과 거짓 ) , 1 Byte
	char // 문자형 , 2 Byte
	string // 문자열 , 문자갯수 * 2 Byte





